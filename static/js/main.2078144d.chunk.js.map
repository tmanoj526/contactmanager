{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFoundPage.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","color","float","bind","to","marginRight","Contacts","Fragment","key","Header","href","defaultProps","About","NotFoundPage","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updContact","match","params","put","Test","title","body","fetch","then","response","json","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2078144d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios'\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action ) => {\r\n    switch(action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts:state.contacts.filter( \r\n                    contact =>\r\n                    contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload,\r\n                ...state.contacts]\r\n            };\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(\r\n                    contact =>\r\n                    contact.id === action.payload.id \r\n                    ? (contact = action.payload) : contact)\r\n            }            \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport class Provider extends Component{\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(\r\n            state=> reducer(state, action)\r\n            )\r\n    };\r\n\r\n    async componentDidMount() {\r\n       const res = await axios\r\n        .get('https://jsonplaceholder.typicode.com/users');\r\n        \r\n        this.setState({contacts: res.data})\r\n        // .then(res => this.setState({\r\n        //     contacts: res.data\r\n        // }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\nclass Contact extends Component {\r\n   state = {\r\n    showContactInfo:false\r\n   };\r\n\r\n    // onShowClick = e => {\r\n    //    this.setState ({\r\n    //        showContactInfo: !this.state.showContactInfo \r\n    //    })\r\n    // }\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try{\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }catch(e){\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        }\r\n        \r\n        \r\n\r\n      \r\n    }\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact;\r\n        const { showContactInfo } =this.state;\r\n        return (\r\n\r\n            <Consumer>\r\n                { value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>{name} {' '}<i onClick={() => this.setState ({\r\n                                    showContactInfo: !this.state.showContactInfo \r\n                                })} \r\n                                className=\"fa fa-sort-down\"\r\n                                style={{ cursor: 'pointer'}}/>\r\n                                <i \r\n                                className=\"fa fa-times\" \r\n                                style={{cursor: 'pointer', color:'red', float:'right'}}\r\n                                onClick={this.onDeleteClick.bind(this,id,dispatch)}\r\n                                />\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i className=\"fa fa-pencil\"\r\n                                    style={{\r\n                                        cursor:'pointer',\r\n                                        float:'right',\r\n                                        color:'black',\r\n                                        marginRight:'1rem'}}/>{' '}\r\n                                </Link>\r\n                                </h4>\r\n                            {showContactInfo ? (<ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                <li className=\"list-group-item\">Phone: {phone}</li>\r\n                            </ul>) : null}\r\n                            \r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n   \r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context'\r\n\r\nclass Contacts extends Component {\r\n        \r\n\r\n        // deleteContact = (id) => {\r\n        //     const { contacts } = this.state;\r\n\r\n        //     const newContacts = contacts.filter(contact =>\r\n        //         contact.id !== id);\r\n\r\n        //     this.setState({\r\n        //         contacts : newContacts\r\n        //     })\r\n        // }\r\n    render() {\r\n        return(\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value;\r\n                    return(\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <b><span className=\"text-danger\">Contact</span> List</b>\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact \r\n                                key={contact.id}\r\n                                contact={contact}\r\n                                />\r\n                            )\r\n                            )}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = (props) => {\r\n    const { name } = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm \r\n        navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {name}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">   \r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fa fa-home\"></i>{' '}Home\r\n                            </Link>    \r\n                        </li> \r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className=\"fa fa-plus\"></i>{' '}Add\r\n                            </Link>    \r\n                        </li> \r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fa fa-question\"></i>{' '}About\r\n                            </Link>    \r\n                        </li>  \r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        \r\n    )\r\n}\r\n\r\nHeader.defaultProps ={\r\n    name: 'My App'\r\n}\r\n\r\nHeader.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple App to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\nexport default About;","import React from 'react'\r\n\r\nconst NotFoundPage = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404</span> Page Not Found\r\n                <p className=\"lead\">Sorry, that page does not exist</p>\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFoundPage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            \r\n            <input\r\n                type={type}\r\n                name={name}\r\n                className={classnames('form-control form-control-lg', {'is-invalid':error})}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div> }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes= {\r\n    label :PropTypes.string.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    value:PropTypes.string.isRequired,\r\n    placeholder:PropTypes.string.isRequired,\r\n    type:PropTypes.string.isRequired,\r\n    onChange:PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text' \r\n}\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n// import  uuid  from 'uuid/v4';\r\nimport axios from 'axios'\r\n\r\n\r\nclass AddContact extends Component {\r\n    \r\n    state = {\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors: {}\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const{ name, email, phone } = this.state;\r\n\r\n        if(name === '') {\r\n            this.setState({errors:{ name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors:{ email: 'Email is required'}});\r\n            return;            \r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors:{ phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const newContact = {\r\n            // id: uuid(),\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n        \r\n        const res = await axios\r\n        .post(\r\n            'https://jsonplaceholder.typicode.com/users', \r\n            newContact\r\n            );\r\n        \r\n            dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n        \r\n\r\n         // clear state\r\n         this.setState({\r\n             name:'',\r\n             email:'',\r\n             phone:'',\r\n             errors:{}\r\n         });\r\n\r\n         this.props.history.push('/');\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        const { name, email, phone, errors } =this.state;\r\n\r\n        return(\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">\r\n                            Add Contact \r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                    label='Name' \r\n                                    name='name'\r\n                                    placeholder='Enter Name'\r\n                                    value={name}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                    label='Email' \r\n                                    name='email'\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.email}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                    label='Phone' \r\n                                    name='phone'\r\n                                    placeholder='Enter Phone'\r\n                                    value={phone}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.phone}\r\n                                    />\r\n                                   \r\n                                    <input type=\"submit\" value=\"Add Contact\"\r\n                                    className=\"btn btn-light btn-block \"/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default AddContact;\r\n","import React, { Component } from 'react';\r\nimport { Consumer } from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport axios from 'axios';\r\n\r\n\r\nclass EditContact extends Component {\r\n    \r\n    state = {\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors: {}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        \r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name:contact.name,\r\n            email:contact.email,\r\n            phone:contact.phone\r\n\r\n        })\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const{ name, email, phone } = this.state;\r\n\r\n        if(name === '') {\r\n            this.setState({errors:{ name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === '') {\r\n            this.setState({errors:{ email: 'Email is required'}});\r\n            return;            \r\n        }\r\n\r\n        if(phone === '') {\r\n            this.setState({errors:{ phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const updContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const {id} = this.props.match.params;\r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`,\r\n        updContact);\r\n\r\n        dispatch({ type: 'UPDATE_CONTACT', payload: res.data});\r\n\r\n         // clear state\r\n         this.setState({\r\n             name:'',\r\n             email:'',\r\n             phone:'',\r\n             errors:{}\r\n         });\r\n\r\n         this.props.history.push('/');\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        const { name, email, phone, errors } =this.state;\r\n\r\n        return(\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">\r\n                            Edit Contact \r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                    label='Name' \r\n                                    name='name'\r\n                                    placeholder='Enter Name'\r\n                                    value={name}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.name}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                    label='Email' \r\n                                    name='email'\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.email}\r\n                                    />\r\n\r\n                                    <TextInputGroup\r\n                                    label='Phone' \r\n                                    name='phone'\r\n                                    placeholder='Enter Phone'\r\n                                    value={phone}\r\n                                    onChange={this.onChange} \r\n                                    error={errors.phone}\r\n                                    />\r\n                                   \r\n                                    <input type=\"submit\" value=\"Update Contact\"\r\n                                    className=\"btn btn-light btn-block \"/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\nexport default EditContact;\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n    state={\r\n        title:'',\r\n        body:''\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n        .then(response => response.json())\r\n        .then(data => this.setState({\r\n            title:data.title,\r\n            body:data.body\r\n        }))\r\n    }\r\n\r\n    // UNSAFE_componentWillMount(){\r\n    //     console.log('componentWillMount')\r\n    // }\r\n\r\n    // componentDidUpdate(){\r\n    //     console.log('componentDidUpdate..')\r\n    // }\r\n\r\n    // UNSAFE_componentWillUpdate(){\r\n    //     console.log('componentWillUpdate..')\r\n    // }\r\n\r\n    // UNSAFE_componentWillReceiveProps(nextProps, nextState){\r\n    //     console.log('componentWillReceiveProps..')\r\n    // }\r\n\r\n    // static getDerivedStateFromProps(nextProps, prevState){\r\n    //     return{\r\n    //         test: 'something'\r\n    //     }   \r\n    // }\r\n\r\n    // getSnapshotBeforeUpdate(prevProps, prevState){\r\n    //     console.log('getSnapshotBeforeUpdate')\r\n    // }\r\n    \r\n    render() {\r\n        const { title, body} = this.state;\r\n        return (\r\n            <div>\r\n               <h1>{title}</h1>\r\n               <p>{body}</p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Test;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch }\nfrom 'react-router-dom';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFoundPage from './components/pages/NotFoundPage';\nimport { Provider }from './context';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport Test from './components/test/Test';\n\nfunction App() {\n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Header name=\"Contact Manager\"/>\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts}/>\n              <Route exact path=\"/contact/add\" component={AddContact}/>\n              <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n              <Route exact path=\"/about\" component={About}/>\n              <Route exact path=\"/test\" component={Test}/>\n              <Route component={NotFoundPage}/>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}